# docker-compose.yaml

version: "3.8"

services:
  # ─────────────────── ELASTICSEARCH
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: pong-elasticsearch
    environment:
      - node.name=elasticsearch
      - cluster.name=pong-logs-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=false
      - "ES_JAVA_OPTS=-Xms256m -Xmx256m"
      - xpack.security.enabled=true
      - xpack.security.authc.api_key.enabled=true
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - xpack.security.http.ssl.enabled=false
      - xpack.security.transport.ssl.enabled=false
      - xpack.ml.enabled=false
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks: [ts_transcendence]
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u ${ELASTIC_USER}:${ELASTIC_PASSWORD} http://localhost:9200/_cluster/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ─────────────────── LOGSTASH
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: pong-logstash
    volumes:
      - ./infra/elk/logstash/pipelines/pong-logs.conf:/usr/share/logstash/pipeline/pong-logs.conf:ro
      - pong_logs:/var/log/pong
    ports:
      - "5044:5044"
      - "9600:9600"
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
      - XPACK_MONITORING_ENABLED=false
      - LOGSTASH_USER=${LOGSTASH_USER}
      - LOGSTASH_PASSWORD=${LOGSTASH_PASSWORD}
    networks: [ts_transcendence]
    depends_on:
      elasticsearch:
        condition: service_healthy
      elk-setup:
        condition: service_completed_successfully

  # ─────────────────── KIBANA
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: pong-kibana
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
      - ELASTICSEARCH_USERNAME=${KIBANA_USER}
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - xpack.security.enabled=true
      - xpack.encryptedSavedObjects.encryptionKey=${KIBANA_ENCRYPTION_KEY}
      - xpack.fleet.enabled=false
    networks: [ts_transcendence]
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -s -u ${KIBANA_USER}:${KIBANA_PASSWORD} http://localhost:5601/api/status || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5

  # ─────────────────── ELK Setup
  elk-setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: pong-elk-setup
    environment:
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_USER=${KIBANA_USER}
      - KIBANA_PASSWORD=${KIBANA_PASSWORD}
      - LOGSTASH_USER=${LOGSTASH_USER}
      - LOGSTASH_PASSWORD=${LOGSTASH_PASSWORD}
    volumes:
      - ./infra/elk/security/setup-passwords.sh:/setup-passwords.sh:ro
      - ./infra/elk/policies/retention-policy.json:/retention-policy.json:ro
      - ./infra/elk/setup-ilm.sh:/setup-ilm.sh:ro
    networks: [ts_transcendence]
    depends_on:
      elasticsearch:
        condition: service_healthy
    entrypoint: ["/bin/bash", "-c", "/setup-passwords.sh && sleep 20 && /setup-ilm.sh"]
    restart: "no"

  # ─────────────────── Front
  frontend:
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
      args:
        - VITE_API_URL=https://transcendence.${LOCAL_IP}.nip.io:8443
    image: transcendence_frontend
    ports: ["3001:3001"]
    restart: unless-stopped
    networks: [ts_transcendence]
    environment:
      - VITE_API_URL=https://transcendence.${LOCAL_IP}.nip.io:8443

  # ─────────────────── Back
  backend:
    build:
      context: .
      dockerfile: ./apps/backend/Dockerfile
    image: transcendence_backend
    environment:
      - NODE_ENV=production
      - PORT=3000
      - BACKEND_URL=https://transcendence.${LOCAL_IP}.nip.io:8443
      - FRONTEND_URL=https://transcendence.${LOCAL_IP}.nip.io:8443
      - GOOGLE_CLIENT_ID=${GOOGLE_CLIENT_ID}
      - GOOGLE_CLIENT_SECRET=${GOOGLE_CLIENT_SECRET}
      - JWT_SECRET=${JWT_SECRET}
      - DATABASE_URL=file:/data/user.db
    volumes:
      - db-data:/data
      - uploads-data:/usr/src/app/uploads
    ports: ["3000:3000"]
    restart: unless-stopped
    networks: [ts_transcendence]

  # ─────────────────── Nginx Gateway
  nginx:
    build:
      context: .
      dockerfile: ./infra/nginx/Dockerfile
      args:
        - DOMAIN_NAME=transcendence.${LOCAL_IP}.nip.io
    image: transcendence_gateway
    environment:
      - DOMAIN_NAME=transcendence.${LOCAL_IP}.nip.io
    depends_on: [frontend, backend]
    ports:
      - "8080:80"
      - "8443:443"
    volumes:
      - uploads-data:/usr/src/app/uploads
    restart: unless-stopped
    networks: [ts_transcendence]

  # ─────────────────── Dashboard Setup
  kibana-setup:
    image: curlimages/curl:latest
    container_name: pong-kibana-setup
    environment:
      - ELASTIC_USER=${ELASTIC_USER}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - ./infra/elk/kibana/dashboards.ndjson:/dashboards.ndjson:ro
      - ./infra/elk/kibana/import-dashboard.sh:/import-dashboard.sh:ro
    networks: [ts_transcendence]
    depends_on:
      kibana:
        condition: service_healthy
      elk-setup:
        condition: service_completed_successfully
    entrypoint: ["/bin/sh", "/import-dashboard.sh"]
    restart: "no"


volumes:
  db-data:
  uploads-data:
  pong_logs:
  elasticsearch_data:

networks:
  ts_transcendence:
    driver: bridge
