# infra/elk/logstash/pipelines/pong-logs.conf

input {
  # TCP input for real-time logs from backend
  tcp {
    port => 5044
    tags => ["pong-realtime"]
    codec => json_lines
  }

  # File input for application logs (from shared volume)
  file {
    path => "/var/log/pong/*.log"
    start_position => "beginning"
    tags => ["pong-file"]
    codec => json
  }
}

filter {
  # Parse timestamp
  if [@timestamp] {
    date {
      match => [ "@timestamp", "ISO8601" ]
    }
  }

  # Add service identification
  if "pong-realtime" in [tags] {
    mutate {
      add_field => { "source_type" => "realtime" }
    }
  }

  if "pong-file" in [tags] {
    mutate {
      add_field => { "source_type" => "file" }
    }
  }

  # Parse game events
  if [event_type] == "game_start" {
    mutate {
      add_field => { 
        "log_category" => "game_lifecycle"
        "metric_type" => "game_start"
      }
    }
  }
  
  if [event_type] == "player_input" {
    mutate {
      add_field => { 
        "log_category" => "player_activity"
        "metric_type" => "input"
      }
    }
  }
  
  if [event_type] == "game_end" {
    mutate {
      add_field => { 
        "log_category" => "game_lifecycle"
        "metric_type" => "game_end"
      }
    }
  }

  if [event_type] == "player_connect" {
    mutate {
      add_field => { 
        "log_category" => "connection"
        "metric_type" => "connect"
      }
    }
  }

  if [event_type] == "player_disconnect" {
    mutate {
      add_field => { 
        "log_category" => "connection"
        "metric_type" => "disconnect"
      }
    }
  }

  if [event_type] == "performance_metric" {
    mutate {
      add_field => { 
        "log_category" => "performance"
        "metric_type" => "system_metrics"
      }
    }
  }

  # Parse API logs
  if [service] == "api" {
    mutate {
      add_field => { "log_category" => "api" }
    }
    
    if [response_time] {
      mutate {
        convert => { "response_time" => "integer" }
      }
    }
  }

  # Handle errors
  if [level] == "error" {
    mutate {
      add_field => { 
        "alert_level" => "high"
        "log_category" => "error"
      }
    }
  }

  # Set default category for uncategorized logs
  if ![log_category] {
    mutate {
      add_field => { "log_category" => "general" }
    }
  }

  # Clean up
  mutate {
    remove_field => [ "host", "path", "tags" ]
  }
}

output {
  elasticsearch {
    user => "${LOGSTASH_USER}"
    password => "${LOGSTASH_PASSWORD}"
    hosts => ["elasticsearch:9200"]
    index => "pong-logs-%{log_category}-%{+YYYY.MM.dd}"
  }
  
  stdout { 
    codec => rubydebug 
  }
}